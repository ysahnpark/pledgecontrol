<?php
/**
 * Models from schema: market version 0.1
 * Code generated by TransformTask
 *
 */

class Account extends Eloquent {

    /**
     * The database table used by the model.
     *
     * @var string
     */
    protected $table = 'accounts';

    /**
     * The primary key column name.
     *
     * @var string
     */
    protected $primaryKey = 'ID';

    /**
     * To disable created_at and updated_at.
     *
     * @var boolean
     */
    public $timestamps = false;


    /**
     * The field list for mass assignment.
     *
     * @var array
     */
    protected $fillable = array('ID', 'SignupDate', 'Name'
      , 'PledgeStartDate', 'PledgeAmount', 'Duration', 'PaymentPeriod', 'PeriodUnit', 'AmountPerPeriod', 'PaidAmount'
      , 'RemainingAmount', 'LastTransactionID', 'Status', 'ThankyouLetterSentDate'
      , 'Email', 'Phone', 'Address', 'City', 'State', 'PostalCode', 'Note'
      , 'PeriodsPassed');

    /**
     * Validation rules for creation
     *
     * @var array
     */
    private static $validation_rules_create = array(
        'Name' => 'required|min:1',
        'PledgeAmount' => 'min:1',
        'PeriodUnit' => 'in:m,w',
        'Duration' => 'min:1',
        //'PledgeStartDate' => 'date_format:Y-D',
        'Email' => 'email'
        );

    /**
     * Validation rules for update
     *
     * @var array
     */
    private static $validation_rules_update = array(
        'Name' => 'required|min:1',
        'PledgeAmount' => 'min:1',
        'PeriodUnit' => 'in:m,w',
        'Duration' => 'min:1',
        'Email' => 'email'
        );

    /**
     * Returns the validation object
     */
    public static function validator($fields, $is_create = true)
    {
        $rules = ($is_create) ? static::$validation_rules_create : static::$validation_rules_update;
        $validator = Validator::make($fields, $rules);

        return $validator;
    }

    public function transactions()
    {
        return $this->hasMany('Transaction', 'AccountID', 'ID');
    }

    public function tickets()
    {
        return $this->hasMany('Ticket', 'AccountID', 'ID');
    }

    public function lastTransaction()
    {
        return $this->hasOne('Transaction', 'ID', 'LastTransactionID');
    }

    public function getName()
    {
        return $this->Name;
    }

    public function getRemainingAmount()
    {
        return ($this->PledgeAmount - $this->PaidAmount);
    }
    public function getAmountExpectedNow()
    {
        return ($this->PeriodsPassed * $this->AmountPerPeriod);
    }
    public function getAmountDueNow()
    {
        return $this->getAmountExpectedNow() - $this->PaidAmount ;
    }
}
